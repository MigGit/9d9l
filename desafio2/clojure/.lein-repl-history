(use 'clojure.xml)
(def xml (parse (slurp "https://blog.golang.org/feed.atom")))
xml
(def xml (parse "https://blog.golang.org/feed.atom"))
xml
(parse "https://blog.golang.org/feed.atom")
(parse (slurp "https://blog.golang.org/feed.atom"))
(require '[clojure.xml :as xml])
quit
(use 'clojure.xml)
(parse (slurp "https://blog.golang.org/feed.atom"))
(xml/parse (slurp "https://blog.golang.org/feed.atom"))
(require '[clojure.xml :as xml])
(xml/parse (slurp "https://blog.golang.org/feed.atom"))
(xml/parse "https://blog.golang.org/feed.atom")
(def x (xml/parse "https://blog.golang.org/feed.atom"))
(keys x)
(:tag x)
(:content x)
(first (:content x))
(count (:content x))
(second (:content x))
(nth 3 (:content x))
(nth (:content x) 3)
(nth (:content x) 4)
(filter #((= (:tag %) :entry)) (:content x))
(filter #(= (:tag %) :entry) (:content x))
(def y (filter #(= (:tag %) :entry) (:content x)))
(:tag y)
(count y)
(first y)
(quit)
(require '[clojure.xml :as xml])
(def (xml/parse "http://apps.shareholder.com/rss/rss.aspx?channels=632&companyid=YHOO"))
(def x (xml/parse "http://apps.shareholder.com/rss/rss.aspx?channels=632&companyid=YHOO"))
(:item x)
(def c (:content x))
(c)
c
(:item c)
(:tag c)
(c)
c
(:tag c)
(:channel c)
x
(:tag x)
(:content x)
(def c (:content x))
c
(:tag c)
(count c)
(first c)
(:tag (first c))
(:content (first c))
(filter (:tag (:content (first c))))
(println (filter (:tag (:content (first c)))))
(filter (:tag (:content (first c))))
(filter #(= :item (:tag %)) (:content (first c)))
(count (filter #(= :item (:tag %)) (:content (first c))))
quit
(require '[clojure.xml :as xml])
(def x (xml/parse "http://apps.shareholder.com/rss/rss.aspx?channels=632&companyid=YHOO"))
(def c (:content x))
c
(def items (filter #(= :item (:tag %)) (:content (first c))))
(count items)
(first items)
(require '[clojure.zip :as zip])
(xml-zip items)
(zip/xml-zip items)
(keys items)
(keys (first items))
(:content (first items))
(get-in :title (first items))
(get-in [0 :title] (first items))
(get-in [0 :tag] (first items))
(get-in (first items) [:tag :title])
(get-in (first items) [:tag])
(get-in (first items) [:titles])
(first items)
(get-in (first items) [:title])
(get-in (first items) [:tag :title :content])
(get-in (first items) [:content])
(get-in (first items) [:tag :title :content])
(first items)
(get-in (first items) [:content :tag :title])
(get-in (first items) [:content :tag])
(get-in (first items) [:content])
(get-in (first items) [:content :tag :title])
(get-in (first items) [:content :tag :title :content])
(get-in (first items) [:content [:tag :title :content]])
(get-in (first items) [:content [:tag :title]])
(get-in (first items) [:content ])
(first (get-in (first items) [:content ]))
(merge (first items))
(:content items)
(filter #(:content %) items) 
(first (filter #(:content %) items))
(first items)
(first (filter #(:content %) (first items)))
((filter #(:content %) (first items))
)
(first items)
(:content items)
(:content (first items))
(merge (:content (first items)))
(seq (:content (first items)))
(array-map (:content (first items)))
(dissoc (first items) :attrs)
(first items)
(dissoc (:content (first items)) :attrs)
(:content (first items)) 
items
(first items)
(xml-seq
(first items))
(first items)
(xml-seq (:content (first items)))
(xml-seq (filter #(:tag %) (:content (first items)))
)
(xml-seq (filter #(:tag %) (:content (first items))))
(xml-seq (filter #(= :title (:tag %)) (:content (first items))))
(xml-seq (filter #(= :title (:tag %)) (:content (items))))
(tag= :title (first items))
(first items)
(tag= :title (:content (first items)))
(xml/tag= :title (:content (first items)))
(first items)
quit
